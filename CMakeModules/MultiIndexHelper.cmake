# Extract template parameters from class definition.
# A list of template paramters is stored in the output_variable.
FUNCTION(GET_TPARAMS class_name output_variable min_args)
#    MESSAGE("class_name=${class_name}")
    SET(${output_variable} "")
    IF ( ${class_name} MATCHES "^([^<]+)<(.*)>" ) 
        STRING(REGEX REPLACE "^([^<]+)<(.*)>" "\\2" class_name_suffix ${class_name})
        STRING(REGEX MATCHALL "." class_char_list "${class_name_suffix}")
        LIST(APPEND class_char_list ",")
        SET(level 0)
        SET(tparam "")
        FOREACH(char ${class_char_list})
            IF ( "${char}" MATCHES "<" )
                MATH(EXPR level "1+(${level})")
            ELSEIF ( "${char}" MATCHES ">" )
                MATH(EXPR level "(${level})-1")
            ENDIF()    
            IF ( "${char}" MATCHES "," AND level EQUAL 0 )
#MESSAGE("APPEND to ${output_variable} ${tparam}" )
#                LIST(APPEND _tparam ${tparam})
                SET(${output_variable} ${${output_variable}} ${tparam})
#MESSAGE("${output_variable} = ${${output_variable}}")
                SET(tparam "")
            ELSE()
                SET(tparam "${tparam}${char}")
            ENDIF()
        ENDFOREACH()
#        SET(output_variable ${_tparam} PARENT_SCOPE)
#        MESSAGE("!!! ${${output_variable}}")    
    ENDIF()
    LIST(LENGTH ${output_variable} tparam_args)
    IF ( ${tparam_args} LESS ${min_args} )
        MESSAGE(FATAL_ERROR "Expect at least ${min_args} template arguments\
                for class ${class_name}.\n ${tparam_args} provided but\
                ${min_args} expected. Parsing: ${${output_variable}}.")
    ENDIF()
#MESSAGE("__tparams=${${output_variable}}")    
    SET(${output_variable} ${${output_variable}} PARENT_SCOPE)
ENDFUNCTION()

# Generate permutation header for underlying index class and get the number
# of blocks in the multi_index
# Two params 
#  - type definition of multi_idx
#  -  output variable for number of blocks
FUNCTION(GEN_PERM_FILE index_type blocks)
    STRING(REGEX REPLACE "^([^<]+)(.*)" "\\1" index_type_prefix ${index_type})
    GET_TPARAMS(${index_type} tparams 2)
#    MESSAGE("tparams= ${tparams}")
    LIST(LENGTH tparams n)
    LIST(GET tparams 1 t_k)
    IF( ${index_type_prefix} MATCHES "^multi_idx_red$"  )
        SET(t_block_error 1)
        IF( n GREATER 2 )
            LIST(GET tparams 2 t_block_error)
        ENDIF()
        MATH(EXPR t_b "1+(${t_k}/(${t_block_error}+1))")
        MATH(EXPR t_match 1)
        MESSAGE("multi_idx_red t_k=${t_k} t_b=${t_b}")
    ELSE()
        MATH(EXPR t_b "${t_k}+1")
        IF( n GREATER 2 ) 
            LIST(GET tparams 2 t_b)
        ENDIF()
        MATH(EXPR t_match ${t_b}-${t_k})
        MESSAGE("multi_idx t_k=${t_k} t_b=${t_b}")
    ENDIF()
    SET(${blocks} ${t_b} PARENT_SCOPE)

    SET(req_file perm_${t_b}_${t_match})
    SET(cppfile "${CMAKE_HOME_DIRECTORY}/lib/${req_file}.cpp")
    SET(hppfile "${CMAKE_HOME_DIRECTORY}/include/multi_idx/${req_file}.hpp")
    FILE(APPEND ${perm_header} "#include \"multi_idx/${req_file}.hpp\"\n")
    IF ((NOT EXISTS ${cppfile}) OR (NOT EXISTS ${hppfile}))
        MESSAGE("GEN_PERM_FILE ${req_file}")
        MESSAGE("Code for struct perm<${t_b},${t_match}> does not exist. Generating...")
        EXECUTE_PROCESS(COMMAND g++ -o ${CMAKE_HOME_DIRECTORY}/scripts/calcperm ${CMAKE_HOME_DIRECTORY}/scripts/calcperm.cpp)
        EXECUTE_PROCESS(COMMAND ./CodeGeneration.sh ${t_b} ${t_match}
                        WORKING_DIRECTORY ${CMAKE_HOME_DIRECTORY}/scripts
                        RESULT_VARIABLE code_geni
                        OUTPUT_VARIABLE log_perm_gen_${t_b}_${t_match}
                        ERROR_VARIABLE  log_perm_gen_${t_b}_${t_match})
        IF (code_geni EQUAL 0)
            MESSAGE("Success!")
        ELSE (code_geni EQUAL 0)
            MESSAGE(FATAL_ERROR "Failed! Log is stored in log_perm_gen_${t_b}_${t_match}")
        ENDIF(code_geni EQUAL 0)
        MESSAGE("CodeGeneration.sh returned ${code_gen}")
    ENDIF()
ENDFUNCTION()
